Git
git

https://git-scm.com/

[root@localhost ~]# dnf search git | grep ^git
Last metadata expiration check: 0:00:27 ago on Thu 25 Apr 2024 05:34:18 PM CST.
git.x86_64 : Fast Version Control System
git-all.noarch : Meta-package to pull in all git tools
git-clang-format.x86_64 : Integration of clang-format for git
git-cola.noarch : A sleek and powerful git GUI
git-core.x86_64 : Core package of git with minimal functionality
git-core-doc.noarch : Documentation files for git-core
git-credential-libsecret.x86_64 : Git helper for accessing credentials via libsecret
git-daemon.x86_64 : Git protocol daemon
git-delta.x86_64 : Syntax-highlighting pager for git
git-email.noarch : Git tools for sending patches via email
git-extras.noarch : Little git extras
git-filter-repo.noarch : Quickly rewrite git repository history (git-filter-branch replacement)
git-gui.noarch : Graphical interface to Git
git-instaweb.noarch : Repository browser in gitweb
git-lfs.x86_64 : Git extension for versioning large files
git-merge-changelog.x86_64 : Git merge driver for ChangeLog files
git-octopus.x86_64 : Git commands for continuous delivery
git-review.noarch : A Git helper for integration with Gerrit
git-revise.noarch : Efficiently update, split, and rearrange git commits
git-subtree.x86_64 : Git tools to merge and split repositories
git-svn.noarch : Git tools for interacting with Subversion repositories
git-tools.noarch : Assorted git-related scripts and tools
git2cl.noarch : Converts git logs to GNU style ChangeLog format
gitk.noarch : Git repository browser
gitolite3.noarch : Highly flexible server for git directory version tracker
gitqlient.x86_64 : Multi-platform Git client written with Qt
gitweb.noarch : Simple web interface to git repositories
[root@localhost ~]# 

[root@localhost ~]# dnf install -y git

[root@localhost ~]# dnf list | grep ^git.x
git.x86_64                                                                               2.31.1-2.el9.2                                 @AppStream          
[root@localhost ~]# 

[root@localhost ~]# dnf list git
Last metadata expiration check: 0:12:09 ago on Thu 25 Apr 2024 05:34:18 PM CST.
Installed Packages
git.x86_64                                   2.31.1-2.el9.2                                   @AppStream
[root@localhost ~]# 

[root@localhost ~]# which git
/usr/bin/git
[root@localhost ~]# 

[root@localhost ~]# dnf provides `which git`
Last metadata expiration check: 0:19:33 ago on Thu 25 Apr 2024 05:34:18 PM CST.
git-core-2.31.1-2.el9.2.x86_64 : Core package of git with minimal functionality
Repo        : @System
Matched from:
Filename    : /usr/bin/git

git-core-2.31.1-2.el9.2.x86_64 : Core package of git with minimal functionality
Repo        : AppStream
Matched from:
Filename    : /usr/bin/git

[root@localhost ~]# 

[root@localhost ~]# dnf repoquery --list git-core | grep bin
Last metadata expiration check: 0:20:28 ago on Thu 25 Apr 2024 05:34:18 PM CST.
/usr/bin/git
/usr/bin/git-receive-pack
/usr/bin/git-shell
/usr/bin/git-upload-archive
/usr/bin/git-upload-pack
[root@localhost ~]# 

[root@localhost ~]# git --version
git version 2.31.1
[root@localhost ~]# 

[root@localhost ~]# git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
[root@localhost ~]# 






https://github.com/81855776/2024.git

git@github.com:81855776/2024.git

gh repo clone 81855776/2024











































